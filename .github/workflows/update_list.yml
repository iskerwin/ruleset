name: Update Lists

on:
  schedule:
    - cron: '0 0 * * *'  # 每天 UTC 0:00 运行
  workflow_dispatch:      # 支持手动触发
    inputs:
      specific_job:
        description: '指定运行特定任务 (all, gfwlist, telegram, etc)'
        required: false
        default: 'all'
  push:
    paths:
      - '.github/workflows/update_lists.yml'
      - '.github/scripts/**'

jobs:
  update_gfwlist:
    runs-on: ubuntu-latest
    if: github.event.inputs.specific_job == 'all' || github.event.inputs.specific_job == 'gfwlist'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests
          
      - name: Update GFWList
        run: python .github/scripts/update_gfwlist.py
          
      - name: Check for changes
        id: check_changes
        run: |
          git diff --exit-code list/non_ip/gfwlist.conf || echo "changes=true" >> $GITHUB_OUTPUT
          
      - name: Stage changes
        if: steps.check_changes.outputs.changes == 'true'
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add list/non_ip/gfwlist.conf
          echo "CHANGES_MADE=true" >> $GITHUB_ENV

  update_telegram:
    runs-on: ubuntu-latest
    if: github.event.inputs.specific_job == 'all' || github.event.inputs.specific_job == 'telegram'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests
          
      - name: Create directories
        run: mkdir -p list/ip
          
      - name: Update Telegram IPs
        run: |
          python - <<EOF
          import os
          import requests
          import ipaddress
          from pathlib import Path
          
          def fetch_telegram_ips():
              url = 'https://core.telegram.org/resources/cidr.txt'
              response = requests.get(url)
              response.raise_for_status()
              return response.text.strip().split('\n')
          
          def format_ip_range(ip_range):
              network = ipaddress.ip_network(ip_range)
              prefix = "IP-CIDR6" if isinstance(network, ipaddress.IPv6Network) else "IP-CIDR"
              return f"{prefix},{ip_range},no-resolve"
          
          try:
              # 确保目录存在
              output_dir = Path('list/ip')
              output_dir.mkdir(parents=True, exist_ok=True)
              
              output_file = output_dir / 'telegram.conf'
              
              # 获取和处理IP范围
              ip_ranges = fetch_telegram_ips()
              formatted_ranges = [format_ip_range(ip_range) for ip_range in ip_ranges]
              
              # 写入文件
              with open(output_file, 'w') as f:
                  f.write('\n'.join(formatted_ranges))
              
              print(f"Successfully updated Telegram IP ranges to {output_file}")
              
              # 验证文件是否写入成功
              if not output_file.exists():
                  raise Exception(f"Failed to create {output_file}")
              
              # 打印文件内容用于调试
              print("\nFile contents:")
              with open(output_file, 'r') as f:
                  print(f.read())
                  
          except Exception as e:
              print(f"Error updating IP ranges: {e}")
              print(f"Current working directory: {os.getcwd()}")
              print(f"Directory contents: {os.listdir('.')}")
              exit(1)
          EOF
          
      - name: Check for changes
        id: check_changes
        run: |
          git diff --exit-code list/ip/telegram.conf || echo "changes=true" >> $GITHUB_OUTPUT
          
      - name: Stage changes
        if: steps.check_changes.outputs.changes == 'true'
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add list/ip/telegram.conf
          echo "CHANGES_MADE=true" >> $GITHUB_ENV

  # 这里可以添加更多的任务...
  # update-task-3:
  # update-task-4:
  # 等等...

  commit-changes:
    needs: [update_gfwlist, update_telegram]  # 添加所有任务的依赖
    runs-on: ubuntu-latest
    if: always()
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Commit and push changes
        run: |
          if [[ -n "$(git status --porcelain)" ]]; then
            git config --local user.email "github-actions[bot]@users.noreply.github.com"
            git config --local user.name "github-actions[bot]"
            
            # 获取远程更新
            git fetch origin main
            
            # 基于最新的远程分支创建临时分支
            git checkout -b temp-branch origin/main
            
            # 将更改应用到新分支
            git checkout main
            git reset --soft temp-branch
            git add .
            
            # 提交并推送
            git commit -m "chore: update lists [skip ci]"
            git push origin main
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}